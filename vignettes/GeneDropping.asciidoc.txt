:toc:
:numbered:
:data-uri:

== First Cousins ==
----
> id <- paste0("sub", 1:8)
> fa.id <- c(NA,NA,NA,"sub1","sub1", NA,"sub3","sub5")
> ma.id <- c(NA,NA,NA,"sub2","sub2", NA,"sub4","sub6")
> test.ped.first.cousins <- pedigree(id = id, dadid = fa.id, momid = ma.id, sex = c(1,2,1,2,1,2,2,2))
> plot(test.ped.first.cousins)
----
image::figures/fig-testpedfirst.jpg[]

----
> trio3 <- new("Trio", id = "sub5", spouse = "sub6", offspring = list("sub8") )
> trio2 <- new("Trio", id = "sub4", spouse = "sub3", offspring = list("sub7") )
> trio1 <- new("Trio", id = "sub1", spouse = "sub2", offspring = list(trio2, trio3) )
> geno.vec <- c(1,0,0,NA,NA,0,NA,NA)
> names(geno.vec) <- paste0("sub",1:8)
> p.share <- Bureau:::GeneDropSim.fn(trio = trio1, geno.vec = geno.vec, dt.vec = c("sub7","sub8"), fd.indices = c(1,2,3,6), n = 1e3)
----
----
> p.share
[1] 0.06
> 1/15
[1] 0.06666667
----

== Second Cousins ==
----
> id <- paste0("sub", 1:12)
> fa.id <- c(NA,NA,NA,"sub1","sub1", NA,"sub3","sub5",NA,NA,"sub9","sub10")
> ma.id <- c(NA,NA,NA,"sub2","sub2", NA,"sub4","sub6",NA,NA,"sub7","sub8")
> test.ped.second.cousins <- pedigree(id = id, dadid = fa.id, momid = ma.id, sex = c(1,2,1,2,1,2,2,2,1,1,2,2))
> plot(test.ped.second.cousins)
----
image::figures/fig-testpedsecond.jpg[]

----
> trio5 <- new("Trio", id = "sub8", spouse = "sub10", offspring = list("sub12") )
> trio4 <- new("Trio", id = "sub7", spouse = "sub9", offspring = list("sub11") )
> trio3 <- new("Trio", id = "sub5", spouse = "sub6", offspring = list(trio5) )
> trio2 <- new("Trio", id = "sub4", spouse = "sub3", offspring = list(trio4) )
> trio1 <- new("Trio", id = "sub1", spouse = "sub2", offspring = list(trio2, trio3) )
> geno.vec <- c(1,0,0,NA,NA,0,NA,NA,0,0,NA,NA)
> names(geno.vec) <- paste0("sub",1:12)
> p.share <- Bureau:::GeneDropSim.fn(trio = trio1, geno.vec = geno.vec, dt.vec = c("sub11","sub12"), fd.indices = c(1,2,3,6,9,10), n = 1e3)
----
----
> p.share
[1] 0.016
> 1/63
[1] 0.01587302
----

== Functions ==

=== GeneDropSim.fn ===
This is the function that performs the gene-drop simulation.
----
> Bureau:::GeneDropSim.fn
function (trio, geno.vec, dt.vec, fd.indices, n = 1000, k = 10, 
    nf = 1) 
{
    n.bail <- k * n
    i <- 1
    share.vec <- logical(n.bail)
    occur.vec <- logical(n.bail)
    while (sum(occur.vec) < n & i <= n.bail) {
        founder <- sample(fd.indices, nf, replace = FALSE)
        geno.vec[founder] <- 1
        geno.vec.sim <- GeneDrop(trio, geno.vec)
        if (any(is.na(geno.vec.sim))) 
            stop("GeneDrop returned NA genotpye.")
        share.vec[i] <- all(geno.vec.sim[dt.vec] == 1)
        occur.vec[i] <- any(geno.vec.sim[dt.vec] == 1)
        geno.vec[founder] <- 0
        i <- i + 1
    }
    return(sum(share.vec)/sum(occur.vec))
}
<environment: namespace:Bureau>
----
=== gene.drop.fn ===
This is the workhorse function of the GeneDrop method.
----
> Bureau:::gene.drop.fn
function (g1, g2) 
{
    if (is.na(g1) | is.na(g2)) {
        goff <- NA
    }
    else if (g1 == 0 && g2 == 1) {
        goff <- sample(x = 0:1, size = 1, prob = rep(0.5, 2))
    }
    else if (g1 == 1 && g2 == 0) {
        goff <- sample(x = 0:1, size = 1, prob = rep(0.5, 2))
    }
    else if (g1 == 1 && g2 == 1) {
        goff <- sample(x = 0:2, size = 1, prob = c(0.25, 0.5, 
            0.25))
    }
    else if (g1 == 0 && g2 == 0) {
        goff <- 0
    }
    else if (g1 == 2 && g2 == 0) {
        goff <- 1
    }
    else if (g1 == 0 && g2 == 2) {
        goff <- 1
    }
    else if (g1 == 1 && g2 == 2) {
        goff <- sample(x = 1:2, size = 1, prob = rep(0.5, 2))
    }
    else if (g1 == 2 && g2 == 1) {
        goff <- sample(x = 1:2, size = 1, prob = rep(0.5, 2))
    }
    else if (g1 == 2 && g2 == 2) {
        goff <- 2
    }
    else {
        goff <- "error"
    }
    return(goff)
}
<environment: namespace:Bureau>
----
